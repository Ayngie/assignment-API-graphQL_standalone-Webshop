type Product {
  id: ID!
  name: String!
  description: String #newly added
  unitPrice: Float!
}

type CartItem {
  id: ID!
  item: Product
  name: String!
  price: Float!
  quantity: Int!
}

type ShoppingCart {
  id: ID!
  items: [CartItem]!
  totalPrice: Float!
}

# type ShoppingCart {
#   id: ID!
#   productsIds: [ID]!
#   totalSum: Float!
#   # items: [ShoppingCartItem]!
# }

# type AddProductsToCartOutput {

# }

type DeletedResourceResponse {
  deletedId: ID
  success: Boolean
}

type Query {
  getProductById(productId: ID!): Product
  getAllProducts: [Product]
  # getCartItemById(itemID: ID!): CartItem
  getShoppingCartById(shoppingCartId: ID!): ShoppingCart
  getAllShoppingCarts: [ShoppingCart]
}

type Mutation {
  createProduct(name: String!, description: String, unitPrice: Float!): Product #added description: String ?
  updateProduct(id: ID!, name: String!, unitPrice: Float!): Product
  deleteProduct(productId: ID!): DeletedResourceResponse

  # createShoppingCartItem(input: CreateShoppingCartItem): ShoppingCartItem
  # updateShoppingCartItem(id: ID!, input: CreateShoppingCartItem!): ShoppingCartItem
  # deleteShoppincCartItem(shoppingCartItemId: ID!): DeletedResourceResponse

  createNewShoppingCart: ShoppingCart
  #   createShoppingCart(input: CreateShoppingCart!): ShoppingCart
  #   updateShoppingCart(id: ID!, input: CreateShoppingCart!): ShoppingCart

  addItemToCart(shoppingCartId: ID!, productId: ID!): ShoppingCart
  removeItemfromCart(shoppingCartId: ID!, cartItemId: ID!): shoppingCart
  # AddCartItem:(input: cartItemInput!): ShoppingCart
  # addProductsToCart(cartId: String!, cartItems: [cartItemInput!]!) {AddProductsToCartOutput}

  deleteShoppingCart(shoppingCartId: ID!): DeletedResourceResponse
}

# input cartItemInput {
#     products: [Product]
#     totalSum: Float
# }

# input CreateShoppingCartItem {
#     id: ID!
#     name: String!
#     unitPrice: Float!
# }

# input CreateShoppingCart {
#   productsIds: [ID]!
#   totalSum: Float!
#   # items: [ShoppingCartItem]!
# }
